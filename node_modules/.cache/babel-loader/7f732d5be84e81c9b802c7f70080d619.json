{"ast":null,"code":"/*  Devueleve el nombre con cada inicial en mayuscula */\nexport function formatearNombre(nombre) {\n  return nombre.split(' ').map(word => {\n    const upperedCase = word && word[0] ? word[0].toUpperCase() : \"\";\n    const loweredCase = word && word[1] ? word.toLowerCase().slice(1) : \"\";\n    return upperedCase + loweredCase;\n  }).join(\" \");\n}\n/*  Obtiene el nombre formateado de la pesona con personid en persons\r\n    Completo = TRUE -> Delvuelve el nombre completo con cada inicial en mayuscula  \r\n    Completo = FALSE -> Delvuelve el primer nombre y el primer apellido con cada inicial en mayuscula   */\n\n/*  Si listar_discos= true y no encuentro la persona, deuelvo \"---\" */\n\nexport function obtenerNombrePersona(personid, persons, completo) {\n  let listar_discos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var person = !persons ? null : persons.filter(p => p.personid === personid);\n  var nombre = '';\n  if (!person) nombre = personid;\n  if (!person && listar_discos) return \"---\";else if (person && person.length > 0) nombre = completo ? person[0].firstname + \" \" + person[0].lastname : person[0].firstname.split(\" \")[0] + \" \" + person[0].lastname.split(\" \")[0];else nombre = personid;\n  return formatearNombre(nombre);\n}\nexport function obtenerNombrePersonaLstDiscos(personid, persons, completo) {\n  return obtenerNombrePersona(personid, persons, completo, true);\n}\n/*  Devuelve la fecha date con formato\r\n    Ej: 01 oct 2021 13:16 */\n\nexport function formatDate(date) {\n  var date2 = new Date(date);\n  var fecha = {};\n  fecha.hh = new Intl.DateTimeFormat('es', {\n    hour: 'numeric'\n  }).format(date2);\n  fecha.mm = new Intl.DateTimeFormat('es', {\n    minute: 'numeric'\n  }).format(date2);\n  fecha.ss = new Intl.DateTimeFormat('es', {\n    second: 'numeric'\n  }).format(date2);\n  fecha.y = new Intl.DateTimeFormat('es', {\n    year: 'numeric'\n  }).format(date2);\n  fecha.m = new Intl.DateTimeFormat('es', {\n    month: 'short'\n  }).format(date2);\n  fecha.d = new Intl.DateTimeFormat('es', {\n    day: '2-digit'\n  }).format(date2);\n  return fecha;\n}","map":{"version":3,"sources":["C:/Users/d896422/Documents/hello/paw_code/src/utils/utils.js"],"names":["formatearNombre","nombre","split","map","word","upperedCase","toUpperCase","loweredCase","toLowerCase","slice","join","obtenerNombrePersona","personid","persons","completo","listar_discos","person","filter","p","length","firstname","lastname","obtenerNombrePersonaLstDiscos","formatDate","date","date2","Date","fecha","hh","Intl","DateTimeFormat","hour","format","mm","minute","ss","second","y","year","m","month","d","day"],"mappings":"AACA;AACA,OAAO,SAASA,eAAT,CAA0BC,MAA1B,EAAkC;AACtC,SAAOA,MAAM,CAACC,KAAP,CAAa,GAAb,EACDC,GADC,CACGC,IAAI,IAAI;AACT,UAAMC,WAAW,GAAGD,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,GAAkBA,IAAI,CAAC,CAAD,CAAJ,CAAQE,WAAR,EAAlB,GAA0C,EAA9D;AACA,UAAMC,WAAW,GAAGH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,GAAkBA,IAAI,CAACI,WAAL,GAAmBC,KAAnB,CAAyB,CAAzB,CAAlB,GAAgD,EAApE;AACA,WAAQJ,WAAW,GAAGE,WAAtB;AACH,GALC,EAMDG,IANC,CAMI,GANJ,CAAP;AAOF;AAGD;AACA;AACA;;AACA;;AACA,OAAO,SAASC,oBAAT,CAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,QAAnD,EAAmF;AAAA,MAAvBC,aAAuB,uEAAP,KAAO;AACtF,MAAIC,MAAM,GAAG,CAACH,OAAD,GAAW,IAAX,GAAkBA,OAAO,CAACI,MAAR,CAAeC,CAAC,IAAIA,CAAC,CAACN,QAAF,KAAeA,QAAnC,CAA/B;AACA,MAAIX,MAAM,GAAG,EAAb;AACA,MAAI,CAACe,MAAL,EACIf,MAAM,GAAGW,QAAT;AACJ,MAAI,CAACI,MAAD,IAAWD,aAAf,EACI,OAAO,KAAP,CADJ,KAEK,IAAIC,MAAM,IAAIA,MAAM,CAACG,MAAP,GAAgB,CAA9B,EACDlB,MAAM,GAAGa,QAAQ,GACXE,MAAM,CAAC,CAAD,CAAN,CAAUI,SAAV,GAAsB,GAAtB,GAA4BJ,MAAM,CAAC,CAAD,CAAN,CAAUK,QAD3B,GAEXL,MAAM,CAAC,CAAD,CAAN,CAAUI,SAAV,CAAoBlB,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,IAAoC,GAApC,GAA0Cc,MAAM,CAAC,CAAD,CAAN,CAAUK,QAAV,CAAmBnB,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAFhD,CADC,KAKDD,MAAM,GAAGW,QAAT;AACJ,SAAOZ,eAAe,CAACC,MAAD,CAAtB;AACH;AAED,OAAO,SAASqB,6BAAT,CAAyCV,QAAzC,EAAmDC,OAAnD,EAA4DC,QAA5D,EAAsE;AACzE,SAAQH,oBAAoB,CAAGC,QAAH,EAAaC,OAAb,EAAsBC,QAAtB,EAAgC,IAAhC,CAA5B;AACH;AAGD;AACA;;AACA,OAAO,SAASS,UAAT,CAAqBC,IAArB,EAA2B;AAC9B,MAAIC,KAAK,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAZ;AACA,MAAIG,KAAK,GAAG,EAAZ;AACAA,EAAAA,KAAK,CAACC,EAAN,GAAW,IAAIC,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA9B,EAAmDC,MAAnD,CAA0DP,KAA1D,CAAX;AACAE,EAAAA,KAAK,CAACM,EAAN,GAAW,IAAIJ,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEI,IAAAA,MAAM,EAAE;AAAV,GAA9B,EAAqDF,MAArD,CAA4DP,KAA5D,CAAX;AACAE,EAAAA,KAAK,CAACQ,EAAN,GAAW,IAAIN,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEM,IAAAA,MAAM,EAAE;AAAV,GAA9B,EAAqDJ,MAArD,CAA4DP,KAA5D,CAAX;AACAE,EAAAA,KAAK,CAACU,CAAN,GAAU,IAAIR,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAA9B,EAAmDN,MAAnD,CAA0DP,KAA1D,CAAV;AACAE,EAAAA,KAAK,CAACY,CAAN,GAAU,IAAIV,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEU,IAAAA,KAAK,EAAE;AAAT,GAA9B,EAAkDR,MAAlD,CAAyDP,KAAzD,CAAV;AACAE,EAAAA,KAAK,CAACc,CAAN,GAAU,IAAIZ,IAAI,CAACC,cAAT,CAAwB,IAAxB,EAA8B;AAAEY,IAAAA,GAAG,EAAE;AAAP,GAA9B,EAAkDV,MAAlD,CAAyDP,KAAzD,CAAV;AACA,SAAOE,KAAP;AACH","sourcesContent":["\r\n/*  Devueleve el nombre con cada inicial en mayuscula */\r\nexport function formatearNombre (nombre) {\r\n   return nombre.split(' ')\r\n        .map(word => {\r\n            const upperedCase = word && word[0] ? word[0].toUpperCase() : \"\";\r\n            const loweredCase = word && word[1] ? word.toLowerCase().slice(1) : \"\";\r\n            return (upperedCase + loweredCase)\r\n        })\r\n        .join(\" \");\r\n}\r\n\r\n\r\n/*  Obtiene el nombre formateado de la pesona con personid en persons\r\n    Completo = TRUE -> Delvuelve el nombre completo con cada inicial en mayuscula  \r\n    Completo = FALSE -> Delvuelve el primer nombre y el primer apellido con cada inicial en mayuscula   */\r\n/*  Si listar_discos= true y no encuentro la persona, deuelvo \"---\" */     \r\nexport function obtenerNombrePersona  (personid, persons, completo,listar_discos = false) {\r\n    var person = !persons ? null : persons.filter(p => p.personid === personid);\r\n    var nombre = '';\r\n    if (!person)\r\n        nombre = personid;\r\n    if (!person && listar_discos)\r\n        return \"---\"\r\n    else if (person && person.length > 0)\r\n        nombre = completo\r\n            ? person[0].firstname + \" \" + person[0].lastname\r\n            : person[0].firstname.split(\" \")[0] + \" \" + person[0].lastname.split(\" \")[0]\r\n    else\r\n        nombre = personid;\r\n    return formatearNombre(nombre);\r\n}\r\n\r\nexport function obtenerNombrePersonaLstDiscos  (personid, persons, completo) {\r\n    return  obtenerNombrePersona  (personid, persons, completo, true) ;\r\n}\r\n\r\n\r\n/*  Devuelve la fecha date con formato\r\n    Ej: 01 oct 2021 13:16 */\r\nexport function formatDate (date) {\r\n    var date2 = new Date(date);\r\n    var fecha = {};\r\n    fecha.hh = new Intl.DateTimeFormat('es', { hour: 'numeric' }).format(date2);\r\n    fecha.mm = new Intl.DateTimeFormat('es', { minute: 'numeric' }).format(date2);\r\n    fecha.ss = new Intl.DateTimeFormat('es', { second: 'numeric' }).format(date2);\r\n    fecha.y = new Intl.DateTimeFormat('es', { year: 'numeric' }).format(date2);\r\n    fecha.m = new Intl.DateTimeFormat('es', { month: 'short' }).format(date2);\r\n    fecha.d = new Intl.DateTimeFormat('es', { day: '2-digit' }).format(date2);\r\n    return fecha;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}